name: Build and Release

on:
  push:
    tags:
      - "v*" # Triggers on version tags like v1.0.0
  workflow_dispatch: # Allows manual triggering
    inputs:
      version:
        description: "Release version"
        required: true
        default: "1.0.0"
      release_notes:
        description: "Release notes"
        required: false
        default: "- Automated release build"

jobs:
  build-and-release:
    runs-on: windows-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: "8.0.x"

      - name: Setup MSBuild
        uses: microsoft/setup-msbuild@v1.3

      - name: Restore dependencies
        run: dotnet restore

      - name: Build and Publish Application
        run: |
          dotnet publish "APS_Optimizer_V3/APS_Optimizer_V3.csproj" --configuration Release --framework net8.0-desktop --runtime win-x64 --self-contained false -p:PublishSingleFile=true --output "publish-output"

      - name: Create release package
        run: |
          $version = if ($env:GITHUB_REF -match 'refs/tags/v(.+)') { $matches[1] } else { "${{ github.event.inputs.version }}" }
          $releaseName = "APS-Optimizer-v$version"

          New-Item -ItemType Directory -Path "release-staging" -Force
          $tempDir = "release-staging\temp"
          New-Item -ItemType Directory -Path $tempDir -Force

          Write-Host "Creating release package: $releaseName"

          # Copy all files except .pdb files
          $sourceDir = "publish-output"
          Get-ChildItem -Path $sourceDir -Recurse | Where-Object { 
              -not $_.PSIsContainer -and $_.Extension -ne ".pdb"
          } | ForEach-Object {
              $relativePath = $_.FullName.Substring((Resolve-Path $sourceDir).Path.Length + 1)
              $destinationPath = Join-Path $tempDir $relativePath
              $destinationDir = Split-Path $destinationPath -Parent
              
              if (-not (Test-Path $destinationDir)) {
                  New-Item -ItemType Directory -Path $destinationDir -Force | Out-Null
              }
              
              Copy-Item $_.FullName $destinationPath
          }

          # Create README file
          $readmeContent = @"
# APS Optimizer v$version

## How to Run
Simply run APS_Optimizer_V3.exe - no installation required!

## Requirements
- Windows 10 or later
- .NET 8 Desktop Runtime (you'll be prompted to install if missing)

## Notes
- Keep all files in the same folder
- The application is portable - you can move the entire folder anywhere
"@

          $readmeContent | Out-File -FilePath "$tempDir\README.txt" -Encoding UTF8

          Write-Host "Files in release package:"
          Get-ChildItem -Path $tempDir | ForEach-Object { Write-Host "  $($_.Name)" }

          # Create zip
          $fullTempPath = (Resolve-Path $tempDir).Path
          $fullZipPath = (Resolve-Path "release-staging").Path + "\$releaseName.zip"

          Push-Location $fullTempPath
          Compress-Archive -Path "*" -DestinationPath $fullZipPath -Force
          Pop-Location

          Remove-Item -Path $tempDir -Recurse -Force

          echo "RELEASE_NAME=$releaseName" >> $env:GITHUB_ENV
          echo "VERSION=$version" >> $env:GITHUB_ENV
        shell: pwsh

      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: v${{ env.VERSION }}
          name: ${{ env.RELEASE_NAME }}
          body: |
            ## Release Notes
            ${{ github.event.inputs.release_notes }}

            ## Installation
            1. Download the executable file
            2. Run it directly - no installation required!

            ## Requirements
            - Windows 10 or later
            - .NET 8 Desktop Runtime (you'll be prompted to install if missing)

            **Note: This is a single executable file with no installation required.**

          files: |
            release-staging/*.exe
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
