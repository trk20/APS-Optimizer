name: Build and Release

on:
  push:
    tags:
      - "v*"
  workflow_dispatch:
    inputs:
      version:
        description: "Release version"
        required: true
        default: "1.0.0"
      release_notes:
        description: "Release notes"
        required: false
        default: "- Automated release build"

jobs:
  build:
    strategy:
      matrix:
        include:
          - os: windows-latest
            rid: win-x64
            zip_suffix: windows-x64
            project: APS_Optimizer_V3/APS_Optimizer_V3.csproj
            framework: net8.0-desktop
          - os: ubuntu-latest
            rid: linux-x64
            zip_suffix: linux-x64
            project: APS_Optimizer_V3_Linux/APS_Optimizer_V3_Linux.csproj
            framework: net8.0
          - os: ubuntu-latest
            rid: linux-arm64
            zip_suffix: linux-arm64
            project: APS_Optimizer_V3_Linux/APS_Optimizer_V3_Linux.csproj
            framework: net8.0
    runs-on: ${{ matrix.os }}
    steps:
      - uses: actions/checkout@v4
      - name: Setup .NET
        uses: actions/setup-dotnet@v4
        with:
          dotnet-version: 8.0.x
      - name: Restore
        run: dotnet restore
      - name: Publish (${{ matrix.rid }}) - Windows
        if: matrix.os == 'windows-latest'
        run: dotnet publish "${{ matrix.project }}" -c Release -f ${{ matrix.framework }} -r ${{ matrix.rid }} --self-contained false -p:PublishSingleFile=true -o publish-output

      - name: Publish (${{ matrix.rid }}) - Linux
        if: matrix.os != 'windows-latest'
        run: dotnet publish "${{ matrix.project }}" -c Release -f ${{ matrix.framework }} -r ${{ matrix.rid }} --self-contained true -p:PublishSingleFile=false -o publish-output

      - name: Package (Windows)
        if: matrix.os == 'windows-latest'
        shell: pwsh
        run: |
          $versionTag = $env:GITHUB_REF -replace 'refs/tags/',''
          if (-not ($versionTag -like 'v*')) { $versionTag = '${{ github.event.inputs.version }}' }
          $version = $versionTag.TrimStart('v')
          $releaseName = "APS-Optimizer-v$version-${{ matrix.zip_suffix }}"
          New-Item -ItemType Directory -Path 'release-staging/temp' -Force | Out-Null
          Copy-Item publish-output\* -Destination release-staging/temp -Recurse
          Get-ChildItem -Recurse -Include *.pdb release-staging/temp | Remove-Item -Force -ErrorAction SilentlyContinue
          $readmeLines = @(
            "APS Optimizer v$version",
            "",
            "How to Run:",
            "  Double-click APS_Optimizer_V3.exe",
            "",
            "Requirements:",
            "  - Windows 10/11",
            "  - .NET 8 Desktop Runtime (if not already installed) - will prompt to download",
            "",
            "Notes:",
            "  * CryptoMiniSat downloads automatically on first solve.",
            "  * Set CRYPTOMINISAT_PATH to override solver path.",
            "",
            "Keep all files together."
          )
          $readmeLines -join "`n" | Set-Content release-staging/temp/README.txt -Encoding UTF8
          Compress-Archive -Path release-staging/temp/* -DestinationPath release-staging/$releaseName.zip
          Remove-Item release-staging/temp -Recurse -Force
          "RELEASE_ARCHIVE=$releaseName.zip" | Out-File -FilePath $env:GITHUB_ENV -Append
          "VERSION=$version" | Out-File -FilePath $env:GITHUB_ENV -Append

      - name: Package (Linux)
        if: matrix.os != 'windows-latest'
        shell: bash
        run: |
          VERSION_TAG="${GITHUB_REF##*/}"
          if [[ ! "$VERSION_TAG" =~ ^v ]]; then VERSION_TAG="${{ github.event.inputs.version }}"; fi
          VERSION="${VERSION_TAG#v}"
          RELEASE_NAME="APS-Optimizer-v${VERSION}-${{ matrix.zip_suffix }}"
          mkdir -p release-staging/temp
          cp -r publish-output/* release-staging/temp/
          find release-staging/temp -name "*.pdb" -delete || true
          BIN_NAME="APS_Optimizer_V3_Linux"
          printf '%s\n' \
            "APS Optimizer v$VERSION" \
            "" \
            "How to Run:" \
            "  chmod +x $BIN_NAME" \
            "  ./$BIN_NAME" \
            "" \
            "Requirements:" \
            "  - Linux desktop" \
            "  - .NET 8 Runtime (framework-dependent build)" \
            "" \
            "Solver:" \
            "  CryptoMiniSat binary auto-downloads; override with CRYPTOMINISAT_PATH." \
            "" \
            "Keep all files together." \
            > release-staging/temp/README.txt
          (cd release-staging/temp && zip -r "../${RELEASE_NAME}.zip" .)
          rm -rf release-staging/temp
          echo "RELEASE_ARCHIVE=${RELEASE_NAME}.zip" >> $GITHUB_ENV
          echo "VERSION=$VERSION" >> $GITHUB_ENV
      - name: Upload artifact (${{ matrix.rid }})
        uses: actions/upload-artifact@v4
        with:
          name: APS-Optimizer-${{ matrix.zip_suffix }}
          path: release-staging/*.zip

  release:
    needs: build
    runs-on: windows-latest
    steps:
      - name: Download artifacts
        uses: actions/download-artifact@v4
        with:
          path: collected
      - name: Prep version
        shell: pwsh
        run: |
          if ($env:GITHUB_REF -match 'refs/tags/(v.+)') { $ver=$matches[1] } else { $ver='${{ github.event.inputs.version }}' }
          echo "VERSION=$ver" >> $env:GITHUB_ENV
          echo "RELEASE_NAME=APS-Optimizer-$ver" >> $env:GITHUB_ENV
      - name: Create GitHub Release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ env.VERSION }}
          name: ${{ env.RELEASE_NAME }}
          body: |
            ## Release Notes
            ${{ github.event.inputs.release_notes }}

            ## Installation
            Download the archive for your platform and extract it.

            Windows: Double-click APS_Optimizer_V3.exe
            Linux:   `chmod +x APS_Optimizer_V3_Linux && ./APS_Optimizer_V3_Linux`

            ## Requirements
            - .NET 8 Runtime (Desktop for Windows build)

            **Keep all published files together.**
          files: |
            collected/**/**/*.zip
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
